
xdp_router_ipv4_kern.o:	file format ELF64-BPF

Disassembly of section xdp_router_ipv4:
xdp_router_ipv4_prog:
; {
       0:	61 12 04 00 00 00 00 00 	r2 = *(u32 *)(r1 + 4)
; void *data = (void *)(long)ctx->data;
       1:	61 17 00 00 00 00 00 00 	r7 = *(u32 *)(r1 + 0)
; if (data + nh_off > data_end)
       2:	bf 73 00 00 00 00 00 00 	r3 = r7
       3:	07 03 00 00 0e 00 00 00 	r3 += 14
       4:	b7 01 00 00 01 00 00 00 	r1 = 1
       5:	2d 23 6f 00 00 00 00 00 	if r3 > r2 goto +111 <LBB0_22>
; h_proto = eth->h_proto;
       6:	71 71 0c 00 00 00 00 00 	r1 = *(u8 *)(r7 + 12)
       7:	71 73 0d 00 00 00 00 00 	r3 = *(u8 *)(r7 + 13)
       8:	67 03 00 00 08 00 00 00 	r3 <<= 8
       9:	4f 13 00 00 00 00 00 00 	r3 |= r1
; if (h_proto == htons(ETH_P_8021Q) || h_proto == htons(ETH_P_8021AD)) {
      10:	15 03 02 00 88 a8 00 00 	if r3 == 43144 goto +2 <LBB0_3>
      11:	b7 04 00 00 0e 00 00 00 	r4 = 14
      12:	55 03 06 00 81 00 00 00 	if r3 != 129 goto +6 <LBB0_5>

LBB0_3:
; if (data + nh_off > data_end)
      13:	bf 73 00 00 00 00 00 00 	r3 = r7
      14:	07 03 00 00 12 00 00 00 	r3 += 18
      15:	b7 01 00 00 01 00 00 00 	r1 = 1
      16:	2d 23 64 00 00 00 00 00 	if r3 > r2 goto +100 <LBB0_22>
      17:	b7 04 00 00 12 00 00 00 	r4 = 18
; h_proto = vhdr->h_vlan_encapsulated_proto;
      18:	69 73 10 00 00 00 00 00 	r3 = *(u16 *)(r7 + 16)

LBB0_5:
      19:	b7 01 00 00 02 00 00 00 	r1 = 2
      20:	57 03 00 00 ff ff 00 00 	r3 &= 65535
; if (h_proto == htons(ETH_P_ARP)) {
      21:	15 03 5f 00 08 06 00 00 	if r3 == 1544 goto +95 <LBB0_22>
      22:	55 03 5b 00 08 00 00 00 	if r3 != 8 goto +91 <LBB0_20>
; struct iphdr *iph = data + nh_off;
      23:	bf 71 00 00 00 00 00 00 	r1 = r7
      24:	0f 41 00 00 00 00 00 00 	r1 += r4
      25:	b7 03 00 00 00 00 00 00 	r3 = 0
; __be32 src_ip = 0, dest_ip = 0;
      26:	63 3a f0 ff 00 00 00 00 	*(u32 *)(r10 - 16) = r3
; if (iph + 1 > data_end)
      27:	bf 14 00 00 00 00 00 00 	r4 = r1
      28:	07 04 00 00 14 00 00 00 	r4 += 20
      29:	2d 24 03 00 00 00 00 00 	if r4 > r2 goto +3 <LBB0_9>
; *dest = iph->daddr;
      30:	61 12 10 00 00 00 00 00 	r2 = *(u32 *)(r1 + 16)
      31:	63 2a f0 ff 00 00 00 00 	*(u32 *)(r10 - 16) = r2
; return iph->protocol;
      32:	71 13 09 00 00 00 00 00 	r3 = *(u8 *)(r1 + 9)

LBB0_9:
; ipproto = parse_ipv4(data, nh_off, data_end, &src_ip, &dest_ip);
      33:	63 3a f4 ff 00 00 00 00 	*(u32 *)(r10 - 12) = r3
      34:	bf a2 00 00 00 00 00 00 	r2 = r10
      35:	07 02 00 00 f0 ff ff ff 	r2 += -16
; direct_entry = bpf_map_lookup_elem(&exact_match, &dest_ip);
      36:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      38:	85 00 00 00 01 00 00 00 	call 1
      39:	bf 06 00 00 00 00 00 00 	r6 = r0
; if (direct_entry && direct_entry->mac && direct_entry->arp.mac) {
      40:	15 06 07 00 00 00 00 00 	if r6 == 0 goto +7 <LBB0_12>
      41:	79 61 18 00 00 00 00 00 	r1 = *(u64 *)(r6 + 24)
      42:	15 01 05 00 00 00 00 00 	if r1 == 0 goto +5 <LBB0_12>
      43:	bf 68 00 00 00 00 00 00 	r8 = r6
      44:	07 08 00 00 18 00 00 00 	r8 += 24
      45:	79 61 00 00 00 00 00 00 	r1 = *(u64 *)(r6 + 0)
      46:	bf 60 00 00 00 00 00 00 	r0 = r6
      47:	55 01 23 00 00 00 00 00 	if r1 != 0 goto +35 <LBB0_16>

LBB0_12:
; key4.b32[0] = 32;
      48:	b7 01 00 00 20 00 00 00 	r1 = 32
      49:	63 1a f8 ff 00 00 00 00 	*(u32 *)(r10 - 8) = r1
; key4.b8[4] = dest_ip & 0xff;
      50:	61 a1 f0 ff 00 00 00 00 	r1 = *(u32 *)(r10 - 16)
; key4.b8[5] = (dest_ip >> 8) & 0xff;
      51:	bf 12 00 00 00 00 00 00 	r2 = r1
      52:	77 02 00 00 08 00 00 00 	r2 >>= 8
      53:	73 2a fd ff 00 00 00 00 	*(u8 *)(r10 - 3) = r2
; key4.b8[6] = (dest_ip >> 16) & 0xff;
      54:	bf 12 00 00 00 00 00 00 	r2 = r1
      55:	77 02 00 00 10 00 00 00 	r2 >>= 16
      56:	73 2a fe ff 00 00 00 00 	*(u8 *)(r10 - 2) = r2
; key4.b8[4] = dest_ip & 0xff;
      57:	73 1a fc ff 00 00 00 00 	*(u8 *)(r10 - 4) = r1
; key4.b8[7] = (dest_ip >> 24) & 0xff;
      58:	77 01 00 00 18 00 00 00 	r1 >>= 24
      59:	73 1a ff ff 00 00 00 00 	*(u8 *)(r10 - 1) = r1
      60:	bf a2 00 00 00 00 00 00 	r2 = r10
; key4.b32[0] = 32;
      61:	07 02 00 00 f8 ff ff ff 	r2 += -8
; prefix_value = bpf_map_lookup_elem(&lpm_map, &key4);
      62:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      64:	85 00 00 00 01 00 00 00 	call 1
      65:	bf 06 00 00 00 00 00 00 	r6 = r0
; if (!prefix_value)
      66:	15 06 31 00 00 00 00 00 	if r6 == 0 goto +49 <LBB0_21>
      67:	bf a2 00 00 00 00 00 00 	r2 = r10
; dest_mac = bpf_map_lookup_elem(&arp_table, &dest_ip);
      68:	07 02 00 00 f0 ff ff ff 	r2 += -16
      69:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      71:	85 00 00 00 01 00 00 00 	call 1
; src_mac = &prefix_value->value;
      72:	bf 68 00 00 00 00 00 00 	r8 = r6
      73:	07 08 00 00 08 00 00 00 	r8 += 8
; if (!dest_mac) {
      74:	55 00 08 00 00 00 00 00 	if r0 != 0 goto +8 <LBB0_16>
; if (!prefix_value->gw)
      75:	61 61 18 00 00 00 00 00 	r1 = *(u32 *)(r6 + 24)
      76:	15 01 27 00 00 00 00 00 	if r1 == 0 goto +39 <LBB0_21>
; dest_ip = prefix_value->gw;
      77:	63 1a f0 ff 00 00 00 00 	*(u32 *)(r10 - 16) = r1
      78:	bf a2 00 00 00 00 00 00 	r2 = r10
      79:	07 02 00 00 f0 ff ff ff 	r2 += -16
; dest_mac = bpf_map_lookup_elem(&arp_table, &dest_ip);
      80:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      82:	85 00 00 00 01 00 00 00 	call 1

LBB0_16:
      83:	b7 01 00 00 01 00 00 00 	r1 = 1
; if (src_mac && dest_mac) {
      84:	15 00 20 00 00 00 00 00 	if r0 == 0 goto +32 <LBB0_22>
      85:	61 66 10 00 00 00 00 00 	r6 = *(u32 *)(r6 + 16)
; __builtin_memcpy(p, dest, 6);
      86:	69 01 04 00 00 00 00 00 	r1 = *(u16 *)(r0 + 4)
      87:	6b 17 04 00 00 00 00 00 	*(u16 *)(r7 + 4) = r1
      88:	69 01 02 00 00 00 00 00 	r1 = *(u16 *)(r0 + 2)
      89:	6b 17 02 00 00 00 00 00 	*(u16 *)(r7 + 2) = r1
      90:	69 01 00 00 00 00 00 00 	r1 = *(u16 *)(r0 + 0)
      91:	6b 17 00 00 00 00 00 00 	*(u16 *)(r7 + 0) = r1
; __builtin_memcpy(p + 3, source, 6);
      92:	69 81 02 00 00 00 00 00 	r1 = *(u16 *)(r8 + 2)
      93:	6b 17 08 00 00 00 00 00 	*(u16 *)(r7 + 8) = r1
      94:	69 81 00 00 00 00 00 00 	r1 = *(u16 *)(r8 + 0)
      95:	6b 17 06 00 00 00 00 00 	*(u16 *)(r7 + 6) = r1
      96:	69 81 04 00 00 00 00 00 	r1 = *(u16 *)(r8 + 4)
      97:	6b 17 0a 00 00 00 00 00 	*(u16 *)(r7 + 10) = r1
      98:	bf a2 00 00 00 00 00 00 	r2 = r10
; static inline void set_src_dst_mac(void *data, void *src, void *dst)
      99:	07 02 00 00 f4 ff ff ff 	r2 += -12
; value = bpf_map_lookup_elem(&rxcnt, &ipproto);
     100:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
     102:	85 00 00 00 01 00 00 00 	call 1
; if (value)
     103:	15 00 03 00 00 00 00 00 	if r0 == 0 goto +3 <LBB0_19>
; *value += 1;
     104:	79 01 00 00 00 00 00 00 	r1 = *(u64 *)(r0 + 0)
     105:	07 01 00 00 01 00 00 00 	r1 += 1
     106:	7b 10 00 00 00 00 00 00 	*(u64 *)(r0 + 0) = r1

LBB0_19:
; return  bpf_redirect_map(&tx_port, forward_to, 0);
     107:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
     109:	bf 62 00 00 00 00 00 00 	r2 = r6
     110:	b7 03 00 00 00 00 00 00 	r3 = 0
     111:	85 00 00 00 33 00 00 00 	call 51
     112:	bf 01 00 00 00 00 00 00 	r1 = r0
     113:	05 00 03 00 00 00 00 00 	goto +3 <LBB0_22>

LBB0_20:
; ipproto = 0;
     114:	b7 01 00 00 00 00 00 00 	r1 = 0
     115:	63 1a f4 ff 00 00 00 00 	*(u32 *)(r10 - 12) = r1

LBB0_21:
     116:	b7 01 00 00 01 00 00 00 	r1 = 1

LBB0_22:
; }
     117:	bf 10 00 00 00 00 00 00 	r0 = r1
     118:	95 00 00 00 00 00 00 00 	exit
