
xdp_redirect_kern.o:	file format ELF64-BPF

Disassembly of section xdp_redirect:
xdp_redirect_prog:
; {
       0:	61 12 04 00 00 00 00 00 	r2 = *(u32 *)(r1 + 4)
; return XDP_PASS;
       1:	61 11 00 00 00 00 00 00 	r1 = *(u32 *)(r1 + 0)
       2:	b7 03 00 00 00 00 00 00 	r3 = 0
       3:	63 3a fc ff 00 00 00 00 	*(u32 *)(r10 - 4) = r3
       4:	63 3a f8 ff 00 00 00 00 	*(u32 *)(r10 - 8) = r3
       5:	b7 06 00 00 01 00 00 00 	r6 = 1
       6:	07 01 00 00 0e 00 00 00 	r1 += 14
       7:	2d 21 13 00 00 00 00 00 	if r1 > r2 goto +19 <LBB0_5>
       8:	bf a2 00 00 00 00 00 00 	r2 = r10
       9:	07 02 00 00 fc ff ff ff 	r2 += -4
      10:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      12:	85 00 00 00 01 00 00 00 	call 1
      13:	bf 07 00 00 00 00 00 00 	r7 = r0
      14:	15 07 0c 00 00 00 00 00 	if r7 == 0 goto +12 <LBB0_5>
      15:	bf a2 00 00 00 00 00 00 	r2 = r10
      16:	07 02 00 00 f8 ff ff ff 	r2 += -8
      17:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      19:	85 00 00 00 01 00 00 00 	call 1
      20:	15 00 02 00 00 00 00 00 	if r0 == 0 goto +2 <LBB0_4>
      21:	b7 01 00 00 01 00 00 00 	r1 = 1
      22:	7b 10 00 00 00 00 00 00 	*(u64 *)(r0 + 0) = r1

LBB0_4:
      23:	61 71 00 00 00 00 00 00 	r1 = *(u32 *)(r7 + 0)
      24:	b7 02 00 00 00 00 00 00 	r2 = 0
      25:	85 00 00 00 17 00 00 00 	call 23
      26:	bf 06 00 00 00 00 00 00 	r6 = r0

LBB0_5:
      27:	bf 60 00 00 00 00 00 00 	r0 = r6
      28:	95 00 00 00 00 00 00 00 	exit
Disassembly of section xdp_redirect_dummy:
xdp_redirect_dummy_prog:
; {
       0:	b7 00 00 00 02 00 00 00 	r0 = 2
; return XDP_PASS;
       1:	95 00 00 00 00 00 00 00 	exit
