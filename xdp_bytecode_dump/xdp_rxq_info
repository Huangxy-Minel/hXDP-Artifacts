
xdp_rxq_info_kern.o:	file format ELF64-BPF

Disassembly of section xdp_prog0:
xdp_prognum0:
; {
       0:	bf 18 00 00 00 00 00 00 	r8 = r1
; void *data     = (void *)(long)ctx->data;
       1:	61 81 00 00 00 00 00 00 	r1 = *(u32 *)(r8 + 0)
; void *data_end = (void *)(long)ctx->data_end;
       2:	7b 1a f0 ff 00 00 00 00 	*(u64 *)(r10 - 16) = r1
       3:	61 81 04 00 00 00 00 00 	r1 = *(u32 *)(r8 + 4)
       4:	7b 1a e8 ff 00 00 00 00 	*(u64 *)(r10 - 24) = r1
       5:	b7 06 00 00 00 00 00 00 	r6 = 0
; u32 key = 0;
       6:	63 6a fc ff 00 00 00 00 	*(u32 *)(r10 - 4) = r6
       7:	bf a2 00 00 00 00 00 00 	r2 = r10
; int  xdp_prognum0(struct xdp_md *ctx)
       8:	07 02 00 00 fc ff ff ff 	r2 += -4
; rec = bpf_map_lookup_elem(&stats_global_map, &key);
       9:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      11:	85 00 00 00 01 00 00 00 	call 1
      12:	bf 09 00 00 00 00 00 00 	r9 = r0
; if (!rec)
      13:	15 09 41 00 00 00 00 00 	if r9 == 0 goto +65 <LBB0_15>
; rec->processed++;
      14:	79 91 00 00 00 00 00 00 	r1 = *(u64 *)(r9 + 0)
      15:	07 01 00 00 01 00 00 00 	r1 += 1
      16:	7b 19 00 00 00 00 00 00 	*(u64 *)(r9 + 0) = r1
; ingress_ifindex = ctx->ingress_ifindex;
      17:	61 87 0c 00 00 00 00 00 	r7 = *(u32 *)(r8 + 12)
      18:	bf a2 00 00 00 00 00 00 	r2 = r10
; rec->processed++;
      19:	07 02 00 00 fc ff ff ff 	r2 += -4
; config = bpf_map_lookup_elem(&config_map, &key);
      20:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      22:	85 00 00 00 01 00 00 00 	call 1
; if (!config)
      23:	15 00 37 00 00 00 00 00 	if r0 == 0 goto +55 <LBB0_15>
; if (ingress_ifindex != config->ifindex) {
      24:	61 01 04 00 00 00 00 00 	r1 = *(u32 *)(r0 + 4)
      25:	1d 17 04 00 00 00 00 00 	if r7 == r1 goto +4 <LBB0_4>
; rec->issue++;
      26:	79 91 08 00 00 00 00 00 	r1 = *(u64 *)(r9 + 8)
      27:	07 01 00 00 01 00 00 00 	r1 += 1
      28:	7b 19 08 00 00 00 00 00 	*(u64 *)(r9 + 8) = r1
      29:	05 00 31 00 00 00 00 00 	goto +49 <LBB0_15>

LBB0_4:
      30:	bf 07 00 00 00 00 00 00 	r7 = r0
; key = ctx->rx_queue_index;
      31:	61 81 10 00 00 00 00 00 	r1 = *(u32 *)(r8 + 16)
; if (key >= MAX_RXQs)
      32:	b7 02 00 00 40 00 00 00 	r2 = 64
      33:	2d 12 01 00 00 00 00 00 	if r2 > r1 goto +1 <LBB0_6>
      34:	b7 01 00 00 40 00 00 00 	r1 = 64

LBB0_6:
      35:	63 1a fc ff 00 00 00 00 	*(u32 *)(r10 - 4) = r1
      36:	bf a2 00 00 00 00 00 00 	r2 = r10
; rxq_rec = bpf_map_lookup_elem(&rx_queue_index_map, &key);
      37:	07 02 00 00 fc ff ff ff 	r2 += -4
      38:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      40:	85 00 00 00 01 00 00 00 	call 1
      41:	bf 75 00 00 00 00 00 00 	r5 = r7
; if (!rxq_rec)
      42:	15 00 24 00 00 00 00 00 	if r0 == 0 goto +36 <LBB0_15>
; rxq_rec->processed++;
      43:	79 01 00 00 00 00 00 00 	r1 = *(u64 *)(r0 + 0)
      44:	07 01 00 00 01 00 00 00 	r1 += 1
      45:	7b 10 00 00 00 00 00 00 	*(u64 *)(r0 + 0) = r1
; if (key == MAX_RXQs)
      46:	61 a1 fc ff 00 00 00 00 	r1 = *(u32 *)(r10 - 4)
      47:	55 01 03 00 40 00 00 00 	if r1 != 64 goto +3 <LBB0_9>
; rxq_rec->issue++;
      48:	79 01 08 00 00 00 00 00 	r1 = *(u64 *)(r0 + 8)
      49:	07 01 00 00 01 00 00 00 	r1 += 1
      50:	7b 10 08 00 00 00 00 00 	*(u64 *)(r0 + 8) = r1

LBB0_9:
; if (unlikely(config->options & (READ_MEM|SWAP_MAC))) {
      51:	61 51 08 00 00 00 00 00 	r1 = *(u32 *)(r5 + 8)
      52:	bf 12 00 00 00 00 00 00 	r2 = r1
      53:	57 02 00 00 03 00 00 00 	r2 &= 3
      54:	15 02 17 00 00 00 00 00 	if r2 == 0 goto +23 <LBB0_14>
; if (eth + 1 > data_end)
      55:	79 a2 f0 ff 00 00 00 00 	r2 = *(u64 *)(r10 - 16)
      56:	07 02 00 00 0e 00 00 00 	r2 += 14
      57:	79 a3 e8 ff 00 00 00 00 	r3 = *(u64 *)(r10 - 24)
      58:	2d 32 14 00 00 00 00 00 	if r2 > r3 goto +20 <LBB0_15>
; if (ntohs(eth->h_proto) < ETH_P_802_3_MIN)
      59:	79 a2 f0 ff 00 00 00 00 	r2 = *(u64 *)(r10 - 16)
      60:	71 22 0c 00 00 00 00 00 	r2 = *(u8 *)(r2 + 12)
      61:	b7 03 00 00 06 00 00 00 	r3 = 6
      62:	2d 23 10 00 00 00 00 00 	if r3 > r2 goto +16 <LBB0_15>
; if (unlikely(config->options & SWAP_MAC))
      63:	57 01 00 00 02 00 00 00 	r1 &= 2
      64:	15 01 0d 00 00 00 00 00 	if r1 == 0 goto +13 <LBB0_14>
      65:	79 a4 f0 ff 00 00 00 00 	r4 = *(u64 *)(r10 - 16)
; dst[0] = p[0];
      66:	69 41 00 00 00 00 00 00 	r1 = *(u16 *)(r4 + 0)
; p[0] = p[3];
      67:	69 42 06 00 00 00 00 00 	r2 = *(u16 *)(r4 + 6)
      68:	6b 24 00 00 00 00 00 00 	*(u16 *)(r4 + 0) = r2
; p[1] = p[4];
      69:	69 42 08 00 00 00 00 00 	r2 = *(u16 *)(r4 + 8)
; dst[1] = p[1];
      70:	69 43 02 00 00 00 00 00 	r3 = *(u16 *)(r4 + 2)
; p[4] = dst[1];
      71:	6b 34 08 00 00 00 00 00 	*(u16 *)(r4 + 8) = r3
; p[1] = p[4];
      72:	6b 24 02 00 00 00 00 00 	*(u16 *)(r4 + 2) = r2
; p[2] = p[5];
      73:	69 42 0a 00 00 00 00 00 	r2 = *(u16 *)(r4 + 10)
; dst[2] = p[2];
      74:	69 43 04 00 00 00 00 00 	r3 = *(u16 *)(r4 + 4)
; p[5] = dst[2];
      75:	6b 34 0a 00 00 00 00 00 	*(u16 *)(r4 + 10) = r3
; p[2] = p[5];
      76:	6b 24 04 00 00 00 00 00 	*(u16 *)(r4 + 4) = r2
; p[3] = dst[0];
      77:	6b 14 06 00 00 00 00 00 	*(u16 *)(r4 + 6) = r1

LBB0_14:
; return config->action;
      78:	61 56 00 00 00 00 00 00 	r6 = *(u32 *)(r5 + 0)

LBB0_15:
; }
      79:	bf 60 00 00 00 00 00 00 	r0 = r6
      80:	95 00 00 00 00 00 00 00 	exit
